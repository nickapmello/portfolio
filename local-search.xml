<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Lista</title>
    <link href="/portfolio/2024/06/15/Lista/"/>
    <url>/portfolio/2024/06/15/Lista/</url>
    
    <content type="html"><![CDATA[<h2 id="Introducao-a-Lista"><a href="#Introducao-a-Lista" class="headerlink" title="Introdução a Lista"></a>Introdução a Lista</h2><p>Na seguinte lista de exercícios, foi proposta a ideia de utilizar os códigos que desenvolvemos em aula para apresentar a solução dos três seguintes exercícios de interpolação. Para cada exercício, deve ser utilizado os métodos de interpolação de Newton e Lagrange. Printando o código demostrando a resposta calculada.</p><h2 id="Exibicao-de-codigos-desenvolvidos"><a href="#Exibicao-de-codigos-desenvolvidos" class="headerlink" title="Exibição de códigos desenvolvidos"></a>Exibição de códigos desenvolvidos</h2><h3 id="Metodo-de-Newton-Ajustei-para-pedir-quantidade-e-valor-dos-pontos"><a href="#Metodo-de-Newton-Ajustei-para-pedir-quantidade-e-valor-dos-pontos" class="headerlink" title="Método de Newton (Ajustei para pedir quantidade e valor dos pontos)"></a>Método de Newton (Ajustei para pedir quantidade e valor dos pontos)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(y) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> y[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> (calc(x[<span class="hljs-number">1</span>:], y[<span class="hljs-number">1</span>:]) - calc(x[:-<span class="hljs-number">1</span>], y[:-<span class="hljs-number">1</span>])) / (x[-<span class="hljs-number">1</span>] - x[<span class="hljs-number">0</span>])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">polinomio</span>(<span class="hljs-params">x, y</span>):<br>    n = <span class="hljs-built_in">len</span>(x)<br>    coeficientes = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        coeficientes.append(calc(x[:i + <span class="hljs-number">1</span>], y[:i + <span class="hljs-number">1</span>]))<br>    <span class="hljs-keyword">return</span> coeficientes<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_polinomio</span>(<span class="hljs-params">coeficientes, x, valor</span>):<br>    n = <span class="hljs-built_in">len</span>(coeficientes)<br>    resultado = coeficientes[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>        termo = coeficientes[i]<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i):<br>            termo *= (valor - x[j])<br>        resultado += termo<br>    <span class="hljs-keyword">return</span> resultado<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">interpolacao</span>(<span class="hljs-params">x, y, valor</span>):<br>    coeficientes = polinomio(x, y)<br>    <span class="hljs-keyword">return</span> calc_polinomio(coeficientes, x, valor)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solicitar_pontos</span>():<br>    quantidade_de_pontos = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Quantos pontos você deseja inserir? &quot;</span>))<br>    pontos_x = []<br>    pontos_y = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(quantidade_de_pontos):<br>        x = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">f&quot;Digite o valor de x_<span class="hljs-subst">&#123;i&#125;</span>: &quot;</span>))<br>        y = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">f&quot;Digite o valor de f(x_<span class="hljs-subst">&#123;i&#125;</span>): &quot;</span>))<br>        pontos_x.append(x)<br>        pontos_y.append(y)<br><br>    <span class="hljs-keyword">return</span> pontos_x, pontos_y<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">valor_final</span>():<br>    pontos_x, pontos_y = solicitar_pontos()<br>    x_interpolar = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Digite o valor de x para interpolação: &quot;</span>))<br>    resultado = interpolacao(pontos_x, pontos_y, x_interpolar)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;O valor interpolado em x = <span class="hljs-subst">&#123;x_interpolar&#125;</span> é <span class="hljs-subst">&#123;resultado:<span class="hljs-number">.4</span>f&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__valor_final__&quot;</span>:<br>    valor_final()<br></code></pre></td></tr></table></figure><h3 id="Metodo-de-Lagrange"><a href="#Metodo-de-Lagrange" class="headerlink" title="Método de Lagrange"></a>Método de Lagrange</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_polinomio</span>(<span class="hljs-params">pontos_x, i, x_interpolar</span>):<br>    polinomio_basico = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(pontos_x)):<br>        <span class="hljs-keyword">if</span> i != j:<br>            polinomio_basico *= (x_interpolar - pontos_x[j]) / (pontos_x[i] - pontos_x[j])<br>    <span class="hljs-keyword">return</span> polinomio_basico<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_poli_lagrange</span>(<span class="hljs-params">pontos_x, pontos_y, x_interpolar</span>):<br>    resultado_interpolado = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(pontos_x)):<br>        L_i = calc_polinomio(pontos_x, i, x_interpolar)<br>        resultado_interpolado += pontos_y[i] * L_i<br>    <span class="hljs-keyword">return</span> resultado_interpolado<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solicitar_pontos</span>():<br>    quantidade_de_pontos = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Quantos pontos você deseja inserir? &quot;</span>))<br>    pontos_x = []<br>    pontos_y = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(quantidade_de_pontos):<br>        x = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">f&quot;Digite o valor de x_<span class="hljs-subst">&#123;i&#125;</span>: &quot;</span>))<br>        y = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">f&quot;Digite o valor de f(x_<span class="hljs-subst">&#123;i&#125;</span>): &quot;</span>))<br>        pontos_x.append(x)<br>        pontos_y.append(y)<br><br>    <span class="hljs-keyword">return</span> pontos_x, pontos_y<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">valor_final</span>():<br>    pontos_x, pontos_y = solicitar_pontos()<br>    x_interpolar = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Digite o valor de x para interpolação: &quot;</span>))<br>    resultado = calc_poli_lagrange(pontos_x, pontos_y, x_interpolar)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;O valor interpolado em x = <span class="hljs-subst">&#123;x_interpolar&#125;</span> é <span class="hljs-subst">&#123;resultado&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__valor_final__&quot;</span>:<br>    valor_final()<br></code></pre></td></tr></table></figure><h3 id="Exercicio-1"><a href="#Exercicio-1" class="headerlink" title="Exercício 1"></a>Exercício 1</h3><p><img src="/portfolio/images/exercicio1.png"></p><p>Solução com método de Newton:<br><img src="/portfolio/images/print1-newton.png"></p><p>Solução com método de Lagrange:<br><img src="/portfolio/images/print1-lagrange.png"></p><h3 id="Exercicio-2"><a href="#Exercicio-2" class="headerlink" title="Exercício 2"></a>Exercício 2</h3><p><img src="/portfolio/images/exercicio2.png"></p><p>Solução com método de Newton:<br><img src="/portfolio/images/print2-newton.png"></p><p>Solução com método de Lagrange:<br><img src="/portfolio/images/print2-lagrange.png"></p><h3 id="Exercicio-3"><a href="#Exercicio-3" class="headerlink" title="Exercício 3"></a>Exercício 3</h3><p><img src="/portfolio/images/exercicio3.png"></p><p>Solução com método de Newton:<br><img src="/portfolio/images/print3-newton.png"></p><p>Solução com método de Lagrange:<br><img src="/portfolio/images/print3-lagrange.png"></p><h3 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h3><p>Os resultados para o exercício 1 são exatamente iguais. Para o exercício 2 são praticamente iguais, com uma pequena diferença decimal  de 1820.234375 para 1820.2344. Para o exercício 3 são também praticamente iguais, com uma pequena diferença decimal de  2.5096001157625 para 2.5096. Portanto, é correto dizer que com os testes realizados nessa atividade, ambos os métodos de Newton e Lagrange são eficazes para realizar a interpolação de polinômios, produzindo resultados consistentes.</p><p>Para mais informações, este é o meu GitHub com os dados corretos:<br><a href="https://github.com/nickapmello/portfolio">GitHub Nicolas Mello - Portfólio Calculo Numerico</a>.</p>]]></content>
    
    
    
    <tags>
      
      <tag>interpolação</tag>
      
      <tag>Lagrange</tag>
      
      <tag>Newton</tag>
      
      <tag>ajuste de curvas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Aula Prática 3</title>
    <link href="/portfolio/2024/06/03/Aula-Pratica-3/"/>
    <url>/portfolio/2024/06/03/Aula-Pratica-3/</url>
    
    <content type="html"><![CDATA[<h3 id="Introducao-a-Interpolacao-Polinomial-de-Lagrange"><a href="#Introducao-a-Interpolacao-Polinomial-de-Lagrange" class="headerlink" title="Introdução à Interpolação Polinomial de Lagrange"></a>Introdução à Interpolação Polinomial de Lagrange</h3><p>A interpolação de Lagrange é uma técnica matemática utilizada para estimar valores desconhecidos dentro do intervalo de um conjunto de pontos conhecidos. Em muitas aplicações práticas, temos um conjunto de dados discretos e precisamos prever ou estimar valores entre esses pontos. A interpolação de Lagrange constrói um polinômio que passa exatamente por cada ponto dado, sendo uma ferramenta poderosa e flexível para diversas aplicações.</p><h3 id="Objetivo-do-Codigo"><a href="#Objetivo-do-Codigo" class="headerlink" title="Objetivo do Código"></a>Objetivo do Código</h3><p>O código desenvolvido para a atividade prática tem como objetivo realizar a interpolação de Lagrange entre vários pontos fornecidos pelo usuário. Ele calcula o valor interpolado usando os polinômios básicos de Lagrange e a soma ponderada dos valores de y nos pontos dados. Abaixo está o código completo seguido de uma explicação detalhada de suas funções:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_polinomio</span>(<span class="hljs-params">pontos_x, i, x_interpolar</span>):<br>    polinomio_basico = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(pontos_x)):<br>        <span class="hljs-keyword">if</span> i != j:<br>            polinomio_basico *= (x_interpolar - pontos_x[j]) / (pontos_x[i] - pontos_x[j])<br>    <span class="hljs-keyword">return</span> polinomio_basico<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_poli_lagrange</span>(<span class="hljs-params">pontos_x, pontos_y, x_interpolar</span>):<br>    resultado_interpolado = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(pontos_x)):<br>        L_i = calc_polinomio(pontos_x, i, x_interpolar)<br>        resultado_interpolado += pontos_y[i] * L_i<br>    <span class="hljs-keyword">return</span> resultado_interpolado<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solicitar_pontos</span>():<br>    quantidade_de_pontos = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Quantos pontos você deseja inserir? &quot;</span>))<br>    pontos_x = []<br>    pontos_y = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(quantidade_de_pontos):<br>        x = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">f&quot;Digite o valor de x_<span class="hljs-subst">&#123;i&#125;</span>: &quot;</span>))<br>        y = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">f&quot;Digite o valor de f(x_<span class="hljs-subst">&#123;i&#125;</span>): &quot;</span>))<br>        pontos_x.append(x)<br>        pontos_y.append(y)<br><br>    <span class="hljs-keyword">return</span> pontos_x, pontos_y<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">valor_final</span>():<br>    pontos_x, pontos_y = solicitar_pontos()<br>    x_interpolar = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Digite o valor de x para interpolação: &quot;</span>))<br>    resultado = calc_poli_lagrange(pontos_x, pontos_y, x_interpolar)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;O valor interpolado em x = <span class="hljs-subst">&#123;x_interpolar&#125;</span> é <span class="hljs-subst">&#123;resultado&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__valor_final__&quot;</span>:<br>    valor_final()<br></code></pre></td></tr></table></figure><h3 id="Explicando-o-codigo-desenvolvido"><a href="#Explicando-o-codigo-desenvolvido" class="headerlink" title="Explicando o código desenvolvido"></a>Explicando o código desenvolvido</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_polinomio</span>(<span class="hljs-params">pontos_x, i, x_interpolar</span>):<br>    polinomio_basico = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(pontos_x)):<br>        <span class="hljs-keyword">if</span> i != j:<br>            polinomio_basico *= (x_interpolar - pontos_x[j]) / (pontos_x[i] - pontos_x[j])<br>    <span class="hljs-keyword">return</span> polinomio_basico<br></code></pre></td></tr></table></figure><p>Esta função calcula o polinômio básico de Lagrange Li(x) para um ponto específico ‘i’. O polinômio básico é construído como um produto de frações que dependem dos pontos fornecidos, exceto o ponto ‘i’. Este polinômio é usado para calcular a contribuição de cada ponto yi na interpolação.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_poli_lagrange</span>(<span class="hljs-params">pontos_x, pontos_y, x_interpolar</span>):<br>    resultado_interpolado = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(pontos_x)):<br>        L_i = calc_polinomio(pontos_x, i, x_interpolar)<br>        resultado_interpolado += pontos_y[i] * L_i<br>    <span class="hljs-keyword">return</span> resultado_interpolado<br></code></pre></td></tr></table></figure><p>Esta função calcula o valor interpolado em ‘x’ usando os polinômios básicos de Lagrange. Ela soma as contribuições ponderadas de cada ponto ‘yi’ onde os pesos são os valores dos polinômios básicos calculados na função anterior.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">solicitar_pontos</span>():<br>    quantidade_de_pontos = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Quantos pontos você deseja inserir? &quot;</span>))<br>    pontos_x = []<br>    pontos_y = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(quantidade_de_pontos):<br>        x = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">f&quot;Digite o valor de x_<span class="hljs-subst">&#123;i&#125;</span>: &quot;</span>))<br>        y = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">f&quot;Digite o valor de f(x_<span class="hljs-subst">&#123;i&#125;</span>): &quot;</span>))<br>        pontos_x.append(x)<br>        pontos_y.append(y)<br><br>    <span class="hljs-keyword">return</span> pontos_x, pontos_y<br></code></pre></td></tr></table></figure><p>Esta função solicita ao usuário que insira a quantidade de pontos e os valores ‘x’ e ‘y’ correspondentes para cada ponto. Os valores são convertidos para ‘float’ para garantir precisão decimal e armazenados em listas.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">valor_final</span>():<br>    pontos_x, pontos_y = solicitar_pontos()<br>    x_interpolar = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Digite o valor de x para interpolação: &quot;</span>))<br>    resultado = calc_poli_lagrange(pontos_x, pontos_y, x_interpolar)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;O valor interpolado em x = <span class="hljs-subst">&#123;x_interpolar&#125;</span> é <span class="hljs-subst">&#123;resultado&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__valor_final__&quot;</span>:<br>    valor_final()<br></code></pre></td></tr></table></figure><p>A função ‘main’ finaliza o código, onde ela chama a função ‘solicitar_pontos’ para obter os pontos fornecidos pelo usuário, também solicita o valor de ‘x’ onde a interpolação deve ser calculada e, em seguida, calcula o valor interpolado usando a função ‘calc_poli_lagrange’.</p><p>Para mais informações, este é o meu GitHub com os dados corretos:<br><a href="https://github.com/nickapmello/portfolio">GitHub Nicolas Mello - Portfólio Calculo Numerico</a>.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Aula Prática 2</title>
    <link href="/portfolio/2024/06/01/Aula-Pratica-2/"/>
    <url>/portfolio/2024/06/01/Aula-Pratica-2/</url>
    
    <content type="html"><![CDATA[<h3 id="Introducao-a-Interpolacao-Polinomial-de-Newton"><a href="#Introducao-a-Interpolacao-Polinomial-de-Newton" class="headerlink" title="Introdução à Interpolação Polinomial de Newton"></a>Introdução à Interpolação Polinomial de Newton</h3><p>A interpolação polinomial de Newton é uma técnica matemática utilizada para estimar valores desconhecidos que se encontram dentro do intervalo de um conjunto de pontos conhecidos. Em muitas aplicações práticas, temos um conjunto de dados discretos e precisamos prever ou estimar valores entre esses pontos. A interpolação de Newton é uma forma eficiente de construir polinômios interpoladores que passam exatamente por cada ponto dado.</p><h3 id="Objetivo-do-Codigo"><a href="#Objetivo-do-Codigo" class="headerlink" title="Objetivo do Código"></a>Objetivo do Código</h3><p>O código desenvolvido para a atividade prática tem como objetivo realizar a interpolação polinomial de Newton entre vários pontos fornecidos pelo usuário. Ele calcula os coeficientes do polinômio interpolador usando diferenças divididas e, em seguida, usa esses coeficientes para estimar valores intermediários. Abaixo está o código completo seguido de uma explicação detalhada de suas funções:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_coeficientes</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(y) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> y[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> (calc_coeficientes(x[<span class="hljs-number">1</span>:], y[<span class="hljs-number">1</span>:]) - calc_coeficientes(x[:-<span class="hljs-number">1</span>], y[:-<span class="hljs-number">1</span>])) / (x[-<span class="hljs-number">1</span>] - x[<span class="hljs-number">0</span>])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">polinomio</span>(<span class="hljs-params">x, y</span>):<br>    n = <span class="hljs-built_in">len</span>(x)<br>    coeficientes = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        coeficientes.append(calc_coeficientes(x[:i + <span class="hljs-number">1</span>], y[:i + <span class="hljs-number">1</span>]))<br>    <span class="hljs-keyword">return</span> coeficientes<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_polinomio</span>(<span class="hljs-params">coeficientes, x, valor</span>):<br>    n = <span class="hljs-built_in">len</span>(coeficientes)<br>    resultado = coeficientes[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>        termo = coeficientes[i]<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i):<br>            termo *= (valor - x[j])<br>        resultado += termo<br>    <span class="hljs-keyword">return</span> resultado<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">interpolacao</span>(<span class="hljs-params">x, y, valor</span>):<br>    coeficientes = polinomio(x, y)<br>    <span class="hljs-keyword">return</span> calc_polinomio(coeficientes, x, valor)<br><br>x_pontos = [<span class="hljs-number">1</span>, <span class="hljs-number">2.4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3.7</span>, <span class="hljs-number">5</span>]<br>y_pontos = [<span class="hljs-number">0.6</span>, <span class="hljs-number">1.3</span>, <span class="hljs-number">1.6</span>, <span class="hljs-number">1.9</span>, <span class="hljs-number">1.2</span>]<br><br>valor_a_interpolar = <span class="hljs-number">4</span><br><br>valor_interpolado = interpolacao(x_pontos, y_pontos, valor_a_interpolar)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;O valor interpolado em x = <span class="hljs-subst">&#123;valor_a_interpolar&#125;</span> é <span class="hljs-subst">&#123;valor_interpolado:<span class="hljs-number">.4</span>f&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="Explicando-o-codigo-desenvolvido"><a href="#Explicando-o-codigo-desenvolvido" class="headerlink" title="Explicando o código desenvolvido"></a>Explicando o código desenvolvido</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(y) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> y[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> (calc(x[<span class="hljs-number">1</span>:], y[<span class="hljs-number">1</span>:]) - calc(x[:-<span class="hljs-number">1</span>], y[:-<span class="hljs-number">1</span>])) / (x[-<span class="hljs-number">1</span>] - x[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>Esta função calcula os coeficientes de diferenças divididas recursivamente. A diferença dividida é uma generalização do coeficiente angular usado na interpolação linear, permitindo calcular coeficientes para polinômios de grau superior. Se houver apenas um ponto, a função retorna o valor de y. Caso contrário, calcula a diferença dividida entre os pontos.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">polinomio</span>(<span class="hljs-params">x, y</span>):<br>    n = <span class="hljs-built_in">len</span>(x)<br>    coeficientes = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        coeficientes.append(calc(x[:i + <span class="hljs-number">1</span>], y[:i + <span class="hljs-number">1</span>]))<br>    <span class="hljs-keyword">return</span> coeficientes<br><br></code></pre></td></tr></table></figure><p>Esta função usa a função ‘calc’ para calcular os coeficientes do polinômio interpolador de Newton. Ela itera sobre o conjunto de pontos, calculando as diferenças divididas necessárias e armazenando esses coeficientes em uma lista.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_polinomio</span>(<span class="hljs-params">coeficientes, x, valor</span>):<br>    n = <span class="hljs-built_in">len</span>(coeficientes)<br>    resultado = coeficientes[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>        termo = coeficientes[i]<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i):<br>            termo *= (valor - x[j])<br>        resultado += termo<br>    <span class="hljs-keyword">return</span> resultado<br></code></pre></td></tr></table></figure><p>Esta função avalia o polinômio interpolador em um valor específico usando os coeficientes calculados. Ela aplica o método de Horner para calcular o valor do polinômio de forma eficiente.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">interpolacao</span>(<span class="hljs-params">x, y, valor</span>):<br>    coeficientes = polinomio(x, y)<br>    <span class="hljs-keyword">return</span> calc_polinomio(coeficientes, x, valor)<br><br></code></pre></td></tr></table></figure><p>A função ‘interpolacao’ coordena o cálculo dos coeficientes e a avaliação do polinômio. Ela primeiro calcula os coeficientes do polinômio interpolador usando a função ‘polinomio’ e, em seguida, avalia o polinômio no valor desejado usando a função ‘calc_polinomio’.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">x_pontos = [<span class="hljs-number">1</span>, <span class="hljs-number">2.4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3.7</span>, <span class="hljs-number">5</span>]<br>y_pontos = [<span class="hljs-number">0.6</span>, <span class="hljs-number">1.3</span>, <span class="hljs-number">1.6</span>, <span class="hljs-number">1.9</span>, <span class="hljs-number">1.2</span>]<br><br>valor_a_interpolar = <span class="hljs-number">4</span><br><br>valor_interpolado = interpolacao(x_pontos, y_pontos, valor_a_interpolar)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;O valor interpolado em x = <span class="hljs-subst">&#123;valor_a_interpolar&#125;</span> é <span class="hljs-subst">&#123;valor_interpolado:<span class="hljs-number">.4</span>f&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>Este é o final do código, onde são listados 5 específicos valores para os pontos de ‘x’ e para os pontos de ‘y’ e o valor de ‘x’ no qual queremos interpolar de um valor estimado para obter o valor final de ‘y’. Por tanto, o código executa a interpolação para o valor de x especificado ‘valor_a_interpolar’, calculando o valor correspondente de y usando o polinômio interpolador de Newton construído a partir dos pontos fornecidos.</p><p>Para mais informações, este é o meu GitHub com os dados corretos:<br><a href="https://github.com/nickapmello/portfolio">GitHub Nicolas Mello - Portfólio Calculo Numerico</a>.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Aula Prática 1</title>
    <link href="/portfolio/2024/05/29/Aula-Pratica-1/"/>
    <url>/portfolio/2024/05/29/Aula-Pratica-1/</url>
    
    <content type="html"><![CDATA[<h3 id="Introducao-a-Interpolacao-Linear"><a href="#Introducao-a-Interpolacao-Linear" class="headerlink" title="Introdução à Interpolação Linear"></a>Introdução à Interpolação Linear</h3><p>A interpolação linear é uma técnica matemática utilizada para estimar valores desconhecidos que se encontram dentro do intervalo de dois pontos conhecidos. Em muitas aplicações práticas, temos um conjunto de dados discretos e precisamos prever ou estimar valores entre esses pontos. A interpolação linear é a forma mais simples de interpolação, e envolve a construção de uma reta que conecta dois pontos dados.</p><h3 id="Objetivo-do-Codigo"><a href="#Objetivo-do-Codigo" class="headerlink" title="Objetivo do Código"></a>Objetivo do Código</h3><p>O código desenvolvido para a primeira atividade prática tem como objetivo realizar a interpolação linear entre dois pontos fornecidos pelo usuário. Ele calcula a equação da reta que passa por esses pontos, encontrando os dois coeficientes angulares, a1 e a0, que definem essa reta. A equação da reta é então usada para prever valores intermediários entre os dois pontos.<br>Abaixo está o código completo seguido de uma explicação detalhada de suas funções:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">coef_angular1</span>(<span class="hljs-params">x0, y0, x1, y1</span>):<br>    <span class="hljs-keyword">return</span> (y1 - y0) / (x1 - x0)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">coef_angular0</span>(<span class="hljs-params">a1, x0, y0</span>):<br>    <span class="hljs-keyword">return</span> y0 - a1 * x0<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pontos</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Insira os valores dos pontos para realizar a interpolação linear.&quot;</span>)<br>    <br>    x0 = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Digite o valor de x0: &quot;</span>))<br>    y0 = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Digite o valor de y0: &quot;</span>))<br>    <br>    x1 = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Digite o valor de x1: &quot;</span>))<br>    y1 = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Digite o valor de y1: &quot;</span>))<br>    <br>    <span class="hljs-keyword">return</span> x0, y0, x1, y1<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    x0, y0, x1, y1 = pontos()<br><br>    a1 = coef_angular1(x0, y0, x1, y1)<br>    a0 = coef_angular0(a1, x0, y0)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Coeficiente a1 = <span class="hljs-subst">&#123;a1:<span class="hljs-number">.3</span>f&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Coeficiente a0 = <span class="hljs-subst">&#123;a0:<span class="hljs-number">.3</span>f&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;P(x) = <span class="hljs-subst">&#123;a0:<span class="hljs-number">.3</span>f&#125;</span> + <span class="hljs-subst">&#123;a1:<span class="hljs-number">.3</span>f&#125;</span>x&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br><span class="hljs-comment"># Pontos específicos da aula para teste</span><br><span class="hljs-comment"># x0, y0 = 0.1, 1.221 ; x1, y1 = 0.6, 3.320</span><br></code></pre></td></tr></table></figure><h3 id="Explicando-o-codigo-desenvolvido"><a href="#Explicando-o-codigo-desenvolvido" class="headerlink" title="Explicando o código desenvolvido"></a>Explicando o código desenvolvido</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">coef_angular1</span>(<span class="hljs-params">x0, y0, x1, y1</span>):<br>    <span class="hljs-keyword">return</span> (y1 - y0) / (x1 - x0)<br></code></pre></td></tr></table></figure><p>Esta função calcula o coeficiente angular a1, que é a inclinação da reta que conecta os dois pontos (x0,y0) e (x1,y1). A inclinação é dada pela razão entre a diferença nas coordenadas y e a diferença nas coordenadas x, sendo:  a1 &#x3D; (y1-y0) &#x2F; (x1-x0)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">coef_angular0</span>(<span class="hljs-params">a1, x0, y0</span>):<br>    <span class="hljs-keyword">return</span> y0 - a1 * x0<br></code></pre></td></tr></table></figure><p>Esta função calcula o coeficiente linear a0, que é o ponto onde a reta intercepta o eixo y. Este coeficiente é calculado rearranjando a equação da reta y &#x3D; a1 * x + a0 para resolver a0, sendo: a0 &#x3D; y0 - a1 * x0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">pontos</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Insira os valores dos pontos para realizar a interpolação linear.&quot;</span>)<br>    <br>    x0 = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Digite o valor de x0: &quot;</span>))<br>    y0 = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Digite o valor de y0: &quot;</span>))<br>    <br>    x1 = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Digite o valor de x1: &quot;</span>))<br>    y1 = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Digite o valor de y1: &quot;</span>))<br>    <br>    <span class="hljs-keyword">return</span> x0, y0, x1, y1<br></code></pre></td></tr></table></figure><p>Esta função solicita ao usuário que insira os valores dos dois pontos necessários para a interpolação linear. Os valores são lidos como entradas do usuário e convertidos para o tipo ‘float’ para garantir precisão decimal. A função retorna os valores dos pontos x0,y0 e x1,y1.</p><p>Após passar por todos esses processos, o código chama a função ‘pontos’ para obter os valores dos pontos fornecidos pelo usuário, calcula os coeficientes a1 e a0 usando as funções ‘coef_angular1’ e ‘coef_angular0’. Por final, imprime os coeficientes e a equação da reta resultante no formato P(X) &#x3D; a0 + a1 * x.</p><p>Para mais informações, este é o meu GitHub com os dados corretos:<br><a href="https://github.com/nickapmello/portfolio">GitHub Nicolas Mello - Portfólio Calculo Numerico</a>.</p>]]></content>
    
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>About</title>
    <link href="/portfolio/"/>
    <url>/portfolio/</url>
    
    <content type="html"><![CDATA[<h3 id="Sobre-Mim"><a href="#Sobre-Mim" class="headerlink" title="Sobre Mim"></a>Sobre Mim</h3><p>Olá! Meu nome é Nicolas Mello, sou Aluno Graduando de Ciências da Computação, estou no 3ª Ano atualmente e este é o meu portfólio de Cálculo Numérico. Aqui você encontrará todas as atividades, tarefas e implementações realizadas no âmbito da disciplina de Cálculo Numérico, com foco em métodos numéricos para ajuste de curvas.</p><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub:"></a>GitHub:</h3><p><a href="https://github.com/nickapmello">nickapmello</a></p>]]></content>
    
  </entry>
  
  
  
</search>
